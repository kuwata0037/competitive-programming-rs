use proconio::{input, marker::Chars, marker::Usize1, source::auto};
use std::collections::VecDeque;
use std::io::BufRead;

fn main() {
    let stdin = std::io::stdin();
    println!("{}", solve(auto::AutoSource::new(stdin.lock())));
}

fn solve<T, R>(source: T) -> u32
where
    T: Into<auto::AutoSource<R>>,
    R: BufRead,
{
    input! {
        from source.into(),
        r: usize,
        c: usize,
        s: (Usize1, Usize1),
        g: (Usize1, Usize1),
        field: [Chars; r],
    }

    let mut d = vec![vec![std::u32::MAX; c]; r];
    d[s.0][s.1] = 0;

    let mut queue = VecDeque::new();
    queue.push_back(s);
    while !queue.is_empty() {
        let front = queue.pop_front().unwrap();
        for &dir in &[(1, 0), (0, 1), (-1, 0), (0, -1)] {
            let di = (front.0 as i32) + dir.0;
            let dj = (front.1 as i32) + dir.1;
            if 0 <= di
                && di < field.len() as i32
                && 0 <= dj
                && dj < field[di as usize].len() as i32
                && field[di as usize][dj as usize] == '.'
                && d[di as usize][dj as usize] == std::u32::MAX
            {
                queue.push_back((di as usize, dj as usize));
                d[di as usize][dj as usize] = d[front.0][front.1] + 1;
            }
        }
    }

    d[g.0][g.1]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn case1() {
        assert_eq!(
            solve(
                "7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########
"
            ),
            11
        );
    }

    #[test]
    fn case2() {
        assert_eq!(
            solve(
                "5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########
"
            ),
            10
        );
    }

    #[test]
    fn case3() {
        assert_eq!(
            solve(
                "50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################
"
            ),
            94
        )
    }
}
